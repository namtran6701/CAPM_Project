---
title: "Regression 3"
author: "Nam Tran"
format: docx
editor: visual
---

Packages used

```{r}
pacman::p_load(tidyverse, 
               magrittr,
               skimr,
               psych,
               broom)
options(scipen = 999)
```

# Data Preparation

-   Import the full data to the working environment
-   Data for this model is still teh same as the data used for model 2 so there is no need for any data modification.

```{r}
full_data <- read.csv('reg2_data.csv', stringsAsFactors = T)
```

Convert PERMNO to factor and format the date column

```{r}
full_data %<>%
  select(-c(X, year)) %>% 
  mutate(PERMNO = as.factor(PERMNO),
         date = ymd(date)
         )
```

# Customization Function

## 1. Model Execution

```{r}

model_execution <- function(data){
    # Create an empty data frame to store the results
  results <- data.frame(PERMNO = character(),
                        Reg3_B2 = numeric(),
                        Reg3_P2 = numeric(),
                        Reg3_ARS = numeric(),
                        stringsAsFactors = T)
  
  # Loop through all unique company names
  for (company in unique(data[,'PERMNO'])) {
    # Filter the data for the current company
    company_data <- data %>%
      filter(PERMNO == company)
  
    # Create a linear regression model with the constraint on the intercept
    model <- lm(excess_ret ~ 0 + sector_prem, 
                data = company_data)
  
    # Extract the coefficient values, p-values, and adjusted R-squared
    coefficient <- coef(model)["sector_prem"]
    p_value <- summary(model)$coefficients["sector_prem", 
                                           "Pr(>|t|)"]
    adjusted_r_squared <- summary(model)$adj.r.squared
  
    # Store the extracted values in the results data frame
    results <- rbind(results, 
                     data.frame(PERMNO = company,
                                Reg3_B2 = coefficient,
                                Reg3_P2 = p_value,
                                Reg3_ARS = adjusted_r_squared,
                                stringsAsFactors = T))
    rownames(results) <- NULL
    
    # Round output to 4 decimal places
    results %<>% 
      mutate_if(is.numeric, round, digits = 4)
  }
  return(results)

}

```

## 2. Statistical summary

```{r}
statistic_summary <- function(input){
  input %>% 
    select(-PERMNO) %>% 
    describe() %>% 
    select(mean, sd, skew, kurtosis)
}  
```

## 3. Visualization

```{r}
histogram_viz <- function(input, variable, binwdith = 0.05, time){
  variable <- sym(variable)
  input %>%
  ggplot(aes(x = !!variable)) +
  geom_histogram(binwidth = binwdith, fill = "#5DADE2", color = "#2C3E50", alpha = 0.8) +
  labs(title = paste("Distribution of", variable, time),
       x = variable,
       y = "Frequency") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
        axis.title.x = element_text(size = 10, face = "bold"),
        axis.title.y = element_text(size = 10, face = "bold"),
        axis.text = element_text(size = 8))
}
```

# Period 1

Extract data for the first period only

```{r}

sample_1 <- full_data %>% 
            filter(year(date) %in% c(2016, 2017, 2018)) %>% 
            select(everything())
```

## Model 3: Stock Excess' returns \~ Sector Premium

### 1. Model's Execution

```{r}
train_1 <- model_execution(sample_1)
```

### 2. Statistical summary

```{r}
train_1 %>% 
  statistic_summary()
```

### 3. Visualization

3.1 Coefficient

```{r}
histogram_viz(train_1,
              variable = "Reg3_B2",
              time = "From 2016 to 2018")
```

3.2 Adjusted R-Squared

```{r}
histogram_viz(train_1, 
              variable = "Reg3_ARS", 
              time = "From 2016 to 2018",
              binwdith = 0.025)
```

# Period 2

Extract data for the second period

```{r}
sample_2 <- full_data %>% 
            filter(year(date) %in% c(2019, 2020, 2021)) %>% 
            select(everything())
```

## Model 3: Stock Excess' returns \~ Sector Premium

### 1. Model's Execution

```{r}
train_2 <- model_execution(sample_2)
```

### 2. Statistical summary

```{r}
train_2 %>% 
  statistic_summary()
```

### 3. Visualization

3.1 Coefficient

```{r}
histogram_viz(train_2,
              variable = "Reg3_B2",
              time = "From 2019 to 2021")
```

3.2 Adjusted R square

```{r}
histogram_viz(train_2, 
              variable = 'Reg3_ARS',
              time = 'From 2019 to 2021', 
              binwdith = 0.025)
```
